{"version":3,"sources":["utils/mutations.js","utils/auth.js","utils/localStorage.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","REMOVE_BOOK","SAVE_BOOK","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","username","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","useMutation","addBook","addBookError","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","infoLink","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","userData","setUserData","removeBook","userProfile","removeBookError","getProfile","useQuery","data","loading","me","handleDeleteBook","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","addError","currentTarget","checkValidity","stopPropagation","user","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","loginUser","log","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd05ecb1.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\nmutation saveBook($bookId: String!) {\n    removeBook(\n        bookId: $bookId\n    ) {\n        _id\n        username\n        email\n        savedBooks {\n          bookId\n          title\n          authors\n          description\n          image\n          link\n          }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\nmutation saveBook($bookId: String!, $authors: [String]!, $description: String, $title: String!, $image: String!, $link: String!) {\n    saveBook( book: {\n        bookId: $bookId\n        authors: $authors\n        description: $description\n        title: $title\n        image: $image\n        link: $link\n    }\n    ) {\n        _id\n        savedBooks {\n            bookId\n            title\n            authors\n            description\n            image\n            link\n        }\n      }\n}\n`;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n\n  confirmEmail(username, token) {\n    \n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n    const savedBookIds = localStorage.getItem('saved_books')\n      ? JSON.parse(localStorage.getItem('saved_books'))\n      : [];\n  \n    return savedBookIds;\n  };\n  \n  export const saveBookIds = (bookIdArr) => {\n    if (bookIdArr.length) {\n      localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n    } else {\n      localStorage.removeItem('saved_books');\n    }\n  };\n  \n  export const removeBookId = (bookId) => {\n    const savedBookIds = localStorage.getItem('saved_books')\n      ? JSON.parse(localStorage.getItem('saved_books'))\n      : null;\n  \n    if (!savedBookIds) {\n      return false;\n    }\n  \n    const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n    localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n  \n    return true;\n  };\n  ","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\n\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  const [addBook, { addBookError }] = useMutation(SAVE_BOOK);\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n        link: book.volumeInfo.infoLink\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await addBook({\n        variables: {...bookToSave }\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n    return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n  ","import { gql } from '@apollo/client';\n\nexport const QUERY_ME = gql`\n{\n  me {\n    _id\n    username\n    email\n    savedBooks {\n      _id\n      bookId\n      title\n      authors\n      description\n      image\n      link\n    }\n  }\n}`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n//import { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport { QUERY_ME } from '../utils/queries';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nconst SavedBooks = () => {\n  \n  const [userData, setUserData] = useState();\n\n  const [removeBook, { removeBookError }] = useMutation(REMOVE_BOOK);\n\n  const userProfile = Auth.getProfile();\n\n  let { loading, data } = useQuery(QUERY_ME, {\n    variables: { username: userProfile.data.username },\n  });\n\n  useEffect(() => {\n      if (data) {\n        setUserData(data.me);\n      }\n  }, [data]);\n\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    //loading = true;\n    try {\n      data = await removeBook({\n        variables: {...{bookId: bookId} }\n      })\n\n      //setUserData(data.me);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n  if (data && !userData)\n  {\n    return <h2>CONFIGURING...</h2>;\n  }\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/react-hooks';\n\n//import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { addError }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { token, user } = await addUser({\n        variables: {...userFormData}\n      });\n\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\n// import { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [loginUser, { error }] = useMutation(LOGIN_USER);\n\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData }\n      });\n\n      if (error) {\n        throw new Error('Something went wrong!');\n      }\n\n      const { token, user } = data.loginUser;\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}